{
  "api/Anima.DataTypes.ConcurrentHashSet-1.Enumerator.html": {
    "href": "api/Anima.DataTypes.ConcurrentHashSet-1.Enumerator.html",
    "title": "Struct ConcurrentHashSet<T>.Enumerator | Anima",
    "keywords": "Struct ConcurrentHashSet<T>.Enumerator Namespace Anima.DataTypes Assembly Anima.dll Represents an enumerator for ConcurrentHashSet<T>. public struct ConcurrentHashSet<T>.Enumerator : IEnumerator<T>, IEnumerator, IDisposable Implements IEnumerator<T> IEnumerator IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Enumerator(ConcurrentHashSet<T>) Constructs an enumerator for ConcurrentHashSet<T>. public Enumerator(ConcurrentHashSet<T> set) Parameters set ConcurrentHashSet<T> Properties Current Gets the element in the collection at the current position of the enumerator. public readonly T Current { get; } Property Value T The element in the collection at the current position of the enumerator. Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() MoveNext() Advances the enumerator to the next element of the collection. public bool MoveNext() Returns bool true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection. Reset() Sets the enumerator to its initial position, which is before the first element in the collection. public void Reset()"
  },
  "api/Anima.DataTypes.ConcurrentHashSet-1.html": {
    "href": "api/Anima.DataTypes.ConcurrentHashSet-1.html",
    "title": "Class ConcurrentHashSet<T> | Anima",
    "keywords": "Class ConcurrentHashSet<T> Namespace Anima.DataTypes Assembly Anima.dll Represents a thread-safe hash-based unique collection. public class ConcurrentHashSet<T> : IReadOnlyCollection<T>, ICollection<T>, IEnumerable<T>, IEnumerable Type Parameters T The type of the items in the collection. Inheritance object ConcurrentHashSet<T> Implements IReadOnlyCollection<T> ICollection<T> IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EnumerableExtensions.ToListedSentence<T>(IEnumerable<T>, string) Remarks All public members of ConcurrentHashSet<T> are thread-safe and may be used concurrently from multiple threads. Constructors ConcurrentHashSet() Initializes a new instance of the ConcurrentHashSet<T> class that is empty, has the default concurrency level, has the default initial capacity, and uses the default comparer for the item type. public ConcurrentHashSet() ConcurrentHashSet(IEnumerable<T>) Initializes a new instance of the ConcurrentHashSet<T> class that contains elements copied from the specified IEnumerable<T> , has the default concurrency level, has the default initial capacity, and uses the default comparer for the item type. public ConcurrentHashSet(IEnumerable<T> collection) Parameters collection IEnumerable<T> The IEnumerable<T> whose elements are copied to the new ConcurrentHashSet<T>. Exceptions ArgumentNullException collection is a null reference. ConcurrentHashSet(IEnumerable<T>, IEqualityComparer<T>?) Initializes a new instance of the ConcurrentHashSet<T> class that contains elements copied from the specified IEnumerable , has the default concurrency level, has the default initial capacity, and uses the specified IEqualityComparer<T>. public ConcurrentHashSet(IEnumerable<T> collection, IEqualityComparer<T>? comparer) Parameters collection IEnumerable<T> The IEnumerable<T> whose elements are copied to the new ConcurrentHashSet<T>. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing items. Exceptions ArgumentNullException collection is a null reference (Nothing in Visual Basic). ConcurrentHashSet(IEqualityComparer<T>?) Initializes a new instance of the ConcurrentHashSet<T> class that is empty, has the specified concurrency level and capacity, and uses the specified IEqualityComparer<T>. public ConcurrentHashSet(IEqualityComparer<T>? comparer) Parameters comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing items. ConcurrentHashSet(int, IEnumerable<T>, IEqualityComparer<T>?) Initializes a new instance of the ConcurrentHashSet<T> class that contains elements copied from the specified IEnumerable, has the specified concurrency level, has the specified initial capacity, and uses the specified IEqualityComparer<T>. public ConcurrentHashSet(int concurrencyLevel, IEnumerable<T> collection, IEqualityComparer<T>? comparer) Parameters concurrencyLevel int The estimated number of threads that will update the ConcurrentHashSet<T> concurrently. collection IEnumerable<T> The IEnumerable<T> whose elements are copied to the new ConcurrentHashSet<T>. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing items. Exceptions ArgumentNullException collection is a null reference. ArgumentOutOfRangeException concurrencyLevel is less than 1. ConcurrentHashSet(int, int) Initializes a new instance of the ConcurrentHashSet<T> class that is empty, has the specified concurrency level and capacity, and uses the default comparer for the item type. public ConcurrentHashSet(int concurrencyLevel, int capacity) Parameters concurrencyLevel int The estimated number of threads that will update the ConcurrentHashSet<T> concurrently. capacity int The initial number of elements that the ConcurrentHashSet<T> can contain. Exceptions ArgumentOutOfRangeException concurrencyLevel is less than 1. ArgumentOutOfRangeException capacity is less than 0. ConcurrentHashSet(int, int, IEqualityComparer<T>?) Initializes a new instance of the ConcurrentHashSet<T> class that is empty, has the specified concurrency level, has the specified initial capacity, and uses the specified IEqualityComparer<T>. public ConcurrentHashSet(int concurrencyLevel, int capacity, IEqualityComparer<T>? comparer) Parameters concurrencyLevel int The estimated number of threads that will update the ConcurrentHashSet<T> concurrently. capacity int The initial number of elements that the ConcurrentHashSet<T> can contain. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing items. Exceptions ArgumentOutOfRangeException concurrencyLevel is less than 1. -or- capacity is less than 0. Properties Comparer Gets the IEqualityComparer<T> that is used to determine equality for the values in the set. public IEqualityComparer<T> Comparer { get; } Property Value IEqualityComparer<T> The IEqualityComparer<T> generic interface implementation that is used to provide hash values and determine equality for the values in the current ConcurrentHashSet<T>. Remarks ConcurrentHashSet<T> requires an equality implementation to determine whether values are equal. You can specify an implementation of the IEqualityComparer<T> generic interface by using a constructor that accepts a comparer parameter; if you do not specify one, the default generic equality comparer Default is used. Count Gets the number of items contained in the ConcurrentHashSet<T> . public int Count { get; } Property Value int The number of items contained in the ConcurrentHashSet<T> . Remarks Count has snapshot semantics and represents the number of items in the ConcurrentHashSet<T> at the moment when Count was accessed. IsEmpty Gets a value that indicates whether the ConcurrentHashSet<T> is empty. public bool IsEmpty { get; } Property Value bool true if the ConcurrentHashSet<T> is empty; otherwise, false. Methods Add(T) Adds the specified item to the ConcurrentHashSet<T>. public bool Add(T item) Parameters item T The item to add. Returns bool true if the items was added to the ConcurrentHashSet<T> successfully; false if it already exists. Exceptions OverflowException The ConcurrentHashSet<T> contains too many items. Clear() Removes all items from the ConcurrentHashSet<T>. public void Clear() Contains(T) Determines whether the ConcurrentHashSet<T> contains the specified item. public bool Contains(T item) Parameters item T The item to locate in the ConcurrentHashSet<T>. Returns bool true if the ConcurrentHashSet<T> contains the item; otherwise, false. GetEnumerator() Returns a value-type enumerator that iterates through the ConcurrentHashSet<T> . public ConcurrentHashSet<T>.Enumerator GetEnumerator() Returns ConcurrentHashSet<T>.Enumerator An enumerator for the ConcurrentHashSet<T>. Remarks The enumerator returned from the collection is safe to use concurrently with reads and writes to the collection, however it does not represent a moment-in-time snapshot of the collection. The contents exposed through the enumerator may contain modifications made to the collection after GetEnumerator() was called. TryGetValue(T, out T) Searches the ConcurrentHashSet<T> for a given value and returns the equal value it finds, if any. public bool TryGetValue(T equalValue, out T actualValue) Parameters equalValue T The value to search for. actualValue T The value from the set that the search found, or the default value of T when the search yielded no match. Returns bool A value indicating whether the search was successful. Remarks This can be useful when you want to reuse a previously stored reference instead of a newly constructed one (so that more sharing of references can occur) or to look up a value that has more complete data than the value you currently have, although their comparer functions indicate they are equal. TryRemove(T) Attempts to remove the item from the ConcurrentHashSet<T>. public bool TryRemove(T item) Parameters item T The item to remove. Returns bool true if an item was removed successfully; otherwise, false."
  },
  "api/Anima.DataTypes.Enumeration-1.html": {
    "href": "api/Anima.DataTypes.Enumeration-1.html",
    "title": "Class Enumeration<TValue> | Anima",
    "keywords": "Class Enumeration<TValue> Namespace Anima.DataTypes Assembly Anima.dll An enumeration-like type that allows for member types not supported by C#'s enum keyword. public abstract class Enumeration<TValue> : IComparable where TValue : IComparable Type Parameters TValue The type of the enumeration members. Inheritance object Enumeration<TValue> Implements IComparable Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Examples The following example demonstrates how to create a string-backed enumeration for three numbers and overload the cast operator to allow for explicit conversion from string. public class Numbers : Enumeration<string> { private Numbers(string value) : base(value) { } public static Numbers One { get; } = new(\"One\"); public static Numbers Two { get; } = new(\"Two\"); public static Numbers Three { get; } = new(\"Three\"); public static implicit operator Numbers(string value) => FromValue<Numbers>(value); }</code></pre> Constructors Enumeration(TValue) protected Enumeration(TValue value) Parameters value TValue Methods CompareTo(object?) public int CompareTo(object? obj) Parameters obj object Returns int Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool FromValue<TEnum>(TValue) Finds the enumeration member with the matching value. protected static TEnum FromValue<TEnum>(TValue value) where TEnum : Enumeration<TValue> Parameters value TValue The value to search for. Returns TEnum The enumeration member matching the given value. Type Parameters TEnum The type of the enumeration to search. Exceptions ArgumentException Throws if no enumeration member has the given value. GetHashCode() public override int GetHashCode() Returns int ToString() public override string? ToString() Returns string Operators implicit operator TValue(Enumeration<TValue>) public static implicit operator TValue(Enumeration<TValue> value) Parameters value Enumeration<TValue> Returns TValue"
  },
  "api/Anima.DataTypes.html": {
    "href": "api/Anima.DataTypes.html",
    "title": "Namespace Anima.DataTypes | Anima",
    "keywords": "Namespace Anima.DataTypes Classes ConcurrentHashSet<T> Represents a thread-safe hash-based unique collection. Enumeration<TValue> An enumeration-like type that allows for member types not supported by C#'s enum keyword. Structs ConcurrentHashSet<T>.Enumerator Represents an enumerator for ConcurrentHashSet<T>."
  },
  "api/Anima.EntityFrameworkCore.SourceGeneration.DbSetGenerator.html": {
    "href": "api/Anima.EntityFrameworkCore.SourceGeneration.DbSetGenerator.html",
    "title": "Class DbSetGenerator | Anima",
    "keywords": "Class DbSetGenerator Namespace Anima.EntityFrameworkCore.SourceGeneration Assembly Anima.EntityFrameworkCore.SourceGeneration.dll Automatically generates DbSet properties for the context marked with [GenerateDbSets] from classes that inherit IEntityTypeConfiguration [Generator] public sealed class DbSetGenerator : IncrementalClassGenerator, IIncrementalGenerator Inheritance object IncrementalClassGenerator<ClassDefinition> IncrementalClassGenerator DbSetGenerator Implements IIncrementalGenerator Inherited Members IncrementalClassGenerator<ClassDefinition>.Initialize(IncrementalGeneratorInitializationContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties StaticSource Source code in this dictionary will be added to the compilation automatically. protected override IEnumerable<StaticSourceDefinition> StaticSource { get; } Property Value IEnumerable<StaticSourceDefinition> Methods BuildSource(SourceProductionContext, Compilation, ImmutableArray<ClassDefinition>) Generates the partial class matching the marked DbContext. protected override void BuildSource(SourceProductionContext context, Compilation compilation, ImmutableArray<ClassDefinition> definitions) Parameters context SourceProductionContext compilation Compilation definitions ImmutableArray<ClassDefinition> Predicate(ClassDeclarationSyntax) Selects classes that are marked with [GenerateDbSets] or implement IEntityTypeConfiguration. protected override bool Predicate(ClassDeclarationSyntax declaration) Parameters declaration ClassDeclarationSyntax Returns bool"
  },
  "api/Anima.EntityFrameworkCore.SourceGeneration.EntityInterface.html": {
    "href": "api/Anima.EntityFrameworkCore.SourceGeneration.EntityInterface.html",
    "title": "Class EntityInterface | Anima",
    "keywords": "Class EntityInterface Namespace Anima.EntityFrameworkCore.SourceGeneration Assembly Anima.EntityFrameworkCore.SourceGeneration.dll Static source definition for the IEntity interface. This is a marker interface for entity classes that don't need to implement IEntityTypeConfiguration. public class EntityInterface : StaticSourceDefinition Inheritance object StaticSourceDefinition EntityInterface Inherited Members StaticSourceDefinition.FileName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Name The type name for the interface. public const string Name = \"IEntity\" Field Value string Namespace The containing namespace for the interface. public const string Namespace = \"Anima.EntityFrameworkCore\" Field Value string Properties Source Builds the source. public override string Source { get; } Property Value string"
  },
  "api/Anima.EntityFrameworkCore.SourceGeneration.GenerateDbSetsAttribute.html": {
    "href": "api/Anima.EntityFrameworkCore.SourceGeneration.GenerateDbSetsAttribute.html",
    "title": "Class GenerateDbSetsAttribute | Anima",
    "keywords": "Class GenerateDbSetsAttribute Namespace Anima.EntityFrameworkCore.SourceGeneration Assembly Anima.EntityFrameworkCore.SourceGeneration.dll Static source definition for the [GenerateDbSets] attribute. public class GenerateDbSetsAttribute : StaticSourceDefinition Inheritance object StaticSourceDefinition GenerateDbSetsAttribute Inherited Members StaticSourceDefinition.FileName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Name The class name for the attribute. public const string Name = \"GenerateDbSetsAttribute\" Field Value string ShortName The short name for the attribute. public const string ShortName = \"GenerateDbSets\" Field Value string Properties Source Builds the source. public override string Source { get; } Property Value string"
  },
  "api/Anima.EntityFrameworkCore.SourceGeneration.html": {
    "href": "api/Anima.EntityFrameworkCore.SourceGeneration.html",
    "title": "Namespace Anima.EntityFrameworkCore.SourceGeneration | Anima",
    "keywords": "Namespace Anima.EntityFrameworkCore.SourceGeneration Classes DbSetGenerator Automatically generates DbSet properties for the context marked with [GenerateDbSets] from classes that inherit IEntityTypeConfiguration EntityInterface Static source definition for the IEntity interface. This is a marker interface for entity classes that don't need to implement IEntityTypeConfiguration. GenerateDbSetsAttribute Static source definition for the [GenerateDbSets] attribute."
  },
  "api/Anima.Extensions.Console.Application.ConsoleApplicationBuilderFactory.html": {
    "href": "api/Anima.Extensions.Console.Application.ConsoleApplicationBuilderFactory.html",
    "title": "Class ConsoleApplicationBuilderFactory | Anima",
    "keywords": "Class ConsoleApplicationBuilderFactory Namespace Anima.Extensions.Console.Application Assembly Anima.Extensions.Console.dll public class ConsoleApplicationBuilderFactory : IConsoleApplicationBuilderFactory Inheritance object ConsoleApplicationBuilderFactory Implements IConsoleApplicationBuilderFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ConsoleApplicationBuilderFactory(IConsoleMenu) public ConsoleApplicationBuilderFactory(IConsoleMenu menu) Parameters menu IConsoleMenu Methods Create() Instantiates a new uninitialized IConsoleApplicationBuilder. public IConsoleApplicationBuilder Create() Returns IConsoleApplicationBuilder"
  },
  "api/Anima.Extensions.Console.Application.IConsoleApplication.html": {
    "href": "api/Anima.Extensions.Console.Application.IConsoleApplication.html",
    "title": "Interface IConsoleApplication | Anima",
    "keywords": "Interface IConsoleApplication Namespace Anima.Extensions.Console.Application Assembly Anima.Extensions.Console.dll Represents a simple console application. public interface IConsoleApplication Methods RunAsync() Continuously loops through the application menus until the user selects the exit command from the root menu. Task RunAsync() Returns Task RunOnceAsync() Loops through the menu tree once. Returns once the user has selected a command and that command has finished executing. Task RunOnceAsync() Returns Task"
  },
  "api/Anima.Extensions.Console.Application.IConsoleApplicationBuilder.html": {
    "href": "api/Anima.Extensions.Console.Application.IConsoleApplicationBuilder.html",
    "title": "Interface IConsoleApplicationBuilder | Anima",
    "keywords": "Interface IConsoleApplicationBuilder Namespace Anima.Extensions.Console.Application Assembly Anima.Extensions.Console.dll Represents a builder for an IConsoleApplication. public interface IConsoleApplicationBuilder Methods Build() Builds the application. IConsoleApplication Build() Returns IConsoleApplication The configured IConsoleApplication instance. Remarks Call RunAsync() or RunOnceAsync() on the returned IConsoleApplication to execute the resulting application. WithCustomExitCommand(string, string, Action?) Customizes the exit command for the application's menu. IConsoleApplicationBuilder WithCustomExitCommand(string path, string description, Action? onSelected = null) Parameters path string Path to the exit command within the menu tree. description string Text description to display beneath the exit command. onSelected Action Optional action to execute when the command is selected. The default behaviour of terminating the menu loop will still apply. Returns IConsoleApplicationBuilder A reference to this builder. WithTitle(string, ConsoleColor) Displays a title when a run method is called on the resulting IConsoleApplication. IConsoleApplicationBuilder WithTitle(string title, ConsoleColor color = ConsoleColor.Gray) Parameters title string Title text to display to the user. color ConsoleColor Color to display the title in. Returns IConsoleApplicationBuilder A reference to this builder. Examples Using the title \"My Application\" would result in the following output: ============================ M Y A P P L I C A T I O N ============================"
  },
  "api/Anima.Extensions.Console.Application.IConsoleApplicationBuilderFactory.html": {
    "href": "api/Anima.Extensions.Console.Application.IConsoleApplicationBuilderFactory.html",
    "title": "Interface IConsoleApplicationBuilderFactory | Anima",
    "keywords": "Interface IConsoleApplicationBuilderFactory Namespace Anima.Extensions.Console.Application Assembly Anima.Extensions.Console.dll Represents a factory that creates instances of IConsoleApplicationBuilder. public interface IConsoleApplicationBuilderFactory Methods Create() Instantiates a new uninitialized IConsoleApplicationBuilder. IConsoleApplicationBuilder Create() Returns IConsoleApplicationBuilder"
  },
  "api/Anima.Extensions.Console.Application.html": {
    "href": "api/Anima.Extensions.Console.Application.html",
    "title": "Namespace Anima.Extensions.Console.Application | Anima",
    "keywords": "Namespace Anima.Extensions.Console.Application Classes ConsoleApplicationBuilderFactory Interfaces IConsoleApplication Represents a simple console application. IConsoleApplicationBuilder Represents a builder for an IConsoleApplication. IConsoleApplicationBuilderFactory Represents a factory that creates instances of IConsoleApplicationBuilder."
  },
  "api/Anima.Extensions.Console.Command.IAsyncConsoleCommand.html": {
    "href": "api/Anima.Extensions.Console.Command.IAsyncConsoleCommand.html",
    "title": "Interface IAsyncConsoleCommand | Anima",
    "keywords": "Interface IAsyncConsoleCommand Namespace Anima.Extensions.Console.Command Assembly Anima.Extensions.Console.dll Represents an asynchronous command that can be executed from within a console application. public interface IAsyncConsoleCommand : IConsoleCommandBase Inherited Members IConsoleCommandBase.Path IConsoleCommandBase.Description Methods ExecuteAsync() The actions to perform when executing this command. Task ExecuteAsync() Returns Task"
  },
  "api/Anima.Extensions.Console.Command.IConsoleCommand.html": {
    "href": "api/Anima.Extensions.Console.Command.IConsoleCommand.html",
    "title": "Interface IConsoleCommand | Anima",
    "keywords": "Interface IConsoleCommand Namespace Anima.Extensions.Console.Command Assembly Anima.Extensions.Console.dll Represents a synchronous command that can be executed from within a console application. public interface IConsoleCommand : IConsoleCommandBase Inherited Members IConsoleCommandBase.Path IConsoleCommandBase.Description Methods Execute() The actions to perform when executing this command. void Execute()"
  },
  "api/Anima.Extensions.Console.Command.IConsoleCommandBase.html": {
    "href": "api/Anima.Extensions.Console.Command.IConsoleCommandBase.html",
    "title": "Interface IConsoleCommandBase | Anima",
    "keywords": "Interface IConsoleCommandBase Namespace Anima.Extensions.Console.Command Assembly Anima.Extensions.Console.dll Represents a command that can be executed from a console application. public interface IConsoleCommandBase Properties Description User-facing description of what the command does when executed. This will be displayed in the console. string Description { get; } Property Value string Path Path to the command in the console command menu tree. string Path { get; } Property Value string Remarks Each menu should be separated by a / character. If no / characters are present, the command will be added to the root menu. If / characters are present, the substring after the final / character will be the text of the menu item that represents this command."
  },
  "api/Anima.Extensions.Console.Command.html": {
    "href": "api/Anima.Extensions.Console.Command.html",
    "title": "Namespace Anima.Extensions.Console.Command | Anima",
    "keywords": "Namespace Anima.Extensions.Console.Command Interfaces IAsyncConsoleCommand Represents an asynchronous command that can be executed from within a console application. IConsoleCommand Represents a synchronous command that can be executed from within a console application. IConsoleCommandBase Represents a command that can be executed from a console application."
  },
  "api/Anima.Extensions.Console.Extensions.html": {
    "href": "api/Anima.Extensions.Console.Extensions.html",
    "title": "Class Extensions | Anima",
    "keywords": "Class Extensions Namespace Anima.Extensions.Console Assembly Anima.Extensions.Console.dll Extensions methods for consumers. public static class Extensions Inheritance object Extensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddAnimaConsole(IServiceCollection) Adds Anima.Extensions.Console services to the given service collection. public static IServiceCollection AddAnimaConsole(this IServiceCollection services) Parameters services IServiceCollection Service collection to add the services to. Returns IServiceCollection Same collection as the input parameter."
  },
  "api/Anima.Extensions.Console.Menu.IConsoleMenu.html": {
    "href": "api/Anima.Extensions.Console.Menu.IConsoleMenu.html",
    "title": "Interface IConsoleMenu | Anima",
    "keywords": "Interface IConsoleMenu Namespace Anima.Extensions.Console.Menu Assembly Anima.Extensions.Console.dll Represents a tree of menus for a console application. public interface IConsoleMenu Methods RunAsync() Steps the user through the menu recursively, until a command is selected or the exit option is selected. Task<bool> RunAsync() Returns Task<bool> true if the menu was exited through the exit option, otherwise false."
  },
  "api/Anima.Extensions.Console.Menu.html": {
    "href": "api/Anima.Extensions.Console.Menu.html",
    "title": "Namespace Anima.Extensions.Console.Menu | Anima",
    "keywords": "Namespace Anima.Extensions.Console.Menu Interfaces IConsoleMenu Represents a tree of menus for a console application."
  },
  "api/Anima.Extensions.Console.Utilities.ConsoleWriter.html": {
    "href": "api/Anima.Extensions.Console.Utilities.ConsoleWriter.html",
    "title": "Class ConsoleWriter | Anima",
    "keywords": "Class ConsoleWriter Namespace Anima.Extensions.Console.Utilities Assembly Anima.Extensions.Console.dll Simple helper class for writing colored messages to the console. public static class ConsoleWriter Inheritance object ConsoleWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Write(string, ConsoleColor?) Appends text to the console. public static void Write(string text, ConsoleColor? color = null) Parameters text string Message to display in the console. color ConsoleColor? Color of the message, will use the current color if null. WriteLine(string, ConsoleColor?) Writes a line of text to the console. public static void WriteLine(string text, ConsoleColor? color = null) Parameters text string Message to display in the console. color ConsoleColor? Color of the message, will use the current color if null. WriteLines(ConsoleColor?, params string[]) Writes multiple lines of text to the console. public static void WriteLines(ConsoleColor? color = null, params string[] lines) Parameters color ConsoleColor? Color to display the messages in, will use the current color if null. lines string[] The lines of text to display in the console."
  },
  "api/Anima.Extensions.Console.Utilities.html": {
    "href": "api/Anima.Extensions.Console.Utilities.html",
    "title": "Namespace Anima.Extensions.Console.Utilities | Anima",
    "keywords": "Namespace Anima.Extensions.Console.Utilities Classes ConsoleWriter Simple helper class for writing colored messages to the console."
  },
  "api/Anima.Extensions.Console.html": {
    "href": "api/Anima.Extensions.Console.html",
    "title": "Namespace Anima.Extensions.Console | Anima",
    "keywords": "Namespace Anima.Extensions.Console Classes Extensions Extensions methods for consumers."
  },
  "api/Anima.Extensions.DateTimeExtensions.html": {
    "href": "api/Anima.Extensions.DateTimeExtensions.html",
    "title": "Class DateTimeExtensions | Anima",
    "keywords": "Class DateTimeExtensions Namespace Anima.Extensions Assembly Anima.dll Extension methods related to the DateTime type. public static class DateTimeExtensions Inheritance object DateTimeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RoundToNearest(DateTime, TimeSpan) Rounds a DateTime to the closest time block of the given size. public static DateTime RoundToNearest(this DateTime dateTime, TimeSpan block) Parameters dateTime DateTime The DateTime to round. block TimeSpan The size of the time block to round to. Returns DateTime The rounded DateTime."
  },
  "api/Anima.Extensions.EnumerableExtensions.html": {
    "href": "api/Anima.Extensions.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | Anima",
    "keywords": "Class EnumerableExtensions Namespace Anima.Extensions Assembly Anima.dll Extension methods related to the IEnumerable<T> type. public static class EnumerableExtensions Inheritance object EnumerableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToListedSentence<T>(IEnumerable<T>, string) Generates a list sentence string from an enumerable. public static string ToListedSentence<T>(this IEnumerable<T> enumerable, string conjunction = \"and\") Parameters enumerable IEnumerable<T> The enumerable to generate the sentence from. conjunction string The conjunction to use before the last item in the enumerable. Returns string The list sentence. Type Parameters T The type of the items in the enumerable. Examples Given the following enumerable: List<string> strings = [\"One\", \"Two\", \"Three\"]; Using the following code: Console.WriteLine(strings.ToListedSentence(\"or\")); Will output the following: One, Two or Three"
  },
  "api/Anima.Extensions.FileSystemExtensions.html": {
    "href": "api/Anima.Extensions.FileSystemExtensions.html",
    "title": "Class FileSystemExtensions | Anima",
    "keywords": "Class FileSystemExtensions Namespace Anima.Extensions Assembly Anima.dll Extension methods related to the file system. public static class FileSystemExtensions Inheritance object FileSystemExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CombineNormalized(IPath, params string[]) public static string CombineNormalized(this IPath path, params string[] paths) Parameters path IPath paths string[] Returns string Remarks Equivalent to Combine(params string[]) except path separators will always be forward slashes regardless of the strings passed into this method."
  },
  "api/Anima.Extensions.html": {
    "href": "api/Anima.Extensions.html",
    "title": "Namespace Anima.Extensions | Anima",
    "keywords": "Namespace Anima.Extensions Classes DateTimeExtensions Extension methods related to the DateTime type. EnumerableExtensions Extension methods related to the IEnumerable<T> type. FileSystemExtensions Extension methods related to the file system."
  },
  "api/Anima.Utilities.SourceGeneration.AttributeHelper.html": {
    "href": "api/Anima.Utilities.SourceGeneration.AttributeHelper.html",
    "title": "Class AttributeHelper | Anima",
    "keywords": "Class AttributeHelper Namespace Anima.Utilities.SourceGeneration Assembly Anima.Utilities.SourceGeneration.dll Helper methods for building marker attribute source. public static class AttributeHelper Inheritance object AttributeHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateSource(string, string, string?, AttributeTargets, bool) Builds source code for a marker attribute. public static string CreateSource(string attributeName, string namespaceName, string? description = null, AttributeTargets attributeTargets = AttributeTargets.All, bool allowMultiple = false) Parameters attributeName string The class name of the marker attribute. namespaceName string The namespace to scope the marker attribute to. description string Description of what the attribute does for the XML doc string. attributeTargets AttributeTargets The targets the marker attribute can be applied to. allowMultiple bool Whether or not the same member can have multiple instances of the marker attribute. Returns string String representation of the source code. CreateSourceBuilder(string, string, string?, AttributeTargets, bool) Builds source code for a marker attribute. public static SourceBuilder CreateSourceBuilder(string attributeName, string namespaceName, string? description = null, AttributeTargets attributeTargets = AttributeTargets.All, bool allowMultiple = false) Parameters attributeName string The class name of the marker attribute. namespaceName string The namespace to scope the marker attribute to. description string Description of what the attribute does for the XML doc string. attributeTargets AttributeTargets The targets the marker attribute can be applied to. allowMultiple bool Whether or not the same member can have multiple instances of the marker attribute. Returns SourceBuilder Source builder populated with the incomplete marker attribute source. The source ends with \"internal class {attributeName} : Attribute\" so further changes should carry on from there."
  },
  "api/Anima.Utilities.SourceGeneration.ClassDefinition.html": {
    "href": "api/Anima.Utilities.SourceGeneration.ClassDefinition.html",
    "title": "Class ClassDefinition | Anima",
    "keywords": "Class ClassDefinition Namespace Anima.Utilities.SourceGeneration Assembly Anima.Utilities.SourceGeneration.dll Wrapper class for INamedTypeSymbol that holds computed information about a class for easy access in source generation code. public class ClassDefinition Inheritance object ClassDefinition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ClassDefinition(INamedTypeSymbol) Wrapper class for INamedTypeSymbol that holds computed information about a class for easy access in source generation code. public ClassDefinition(INamedTypeSymbol symbol) Parameters symbol INamedTypeSymbol The symbol associated with this class. Properties FileName The file name that can be given to source files generated for the class. public string FileName { get; } Property Value string FullName The fully qualified name of the class (without assembly information). public string FullName { get; } Property Value string FullNameWithoutGenerics The fully qualified type name without generic type parameters in it. public string FullNameWithoutGenerics { get; } Property Value string IsAbstract True if this type is an abstract class. public bool IsAbstract { get; } Property Value bool IsGenericType True if this type or some containing type has generic type parameters. public bool IsGenericType { get; } Property Value bool Name The local type name of the class. public string Name { get; } Property Value string NameWithoutGenerics The local type name without generic type parameters in it. public string NameWithoutGenerics { get; } Property Value string Namespace The namespace that this class belongs to. public string Namespace { get; } Property Value string Symbol The INamedTypeSymbol associated with this class. public INamedTypeSymbol Symbol { get; } Property Value INamedTypeSymbol"
  },
  "api/Anima.Utilities.SourceGeneration.Extensions.html": {
    "href": "api/Anima.Utilities.SourceGeneration.Extensions.html",
    "title": "Class Extensions | Anima",
    "keywords": "Class Extensions Namespace Anima.Utilities.SourceGeneration Assembly Anima.Utilities.SourceGeneration.dll Extension methods to assist with source generation. public static class Extensions Inheritance object Extensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetAttribute(ISymbol, string) Gets the attribute with the given name from the given symbol. public static AttributeData? GetAttribute(this ISymbol symbol, string fullAttributeName) Parameters symbol ISymbol The symbol to get the attribute from. fullAttributeName string The name of the attribute (with \"Attribute\" suffix) to retrieve. Returns AttributeData The data associated with the attribute. GetMarkedMethods(ITypeSymbol, string) Retrieves all methods from the given type that are marked with the given marker attribute. public static IEnumerable<string> GetMarkedMethods(this ITypeSymbol symbol, string markerAttributeName) Parameters symbol ITypeSymbol The symbol to retrieve methods from. markerAttributeName string Name of the marker attribute class including the \"Attribute\" suffix. Returns IEnumerable<string> An enumerable of the marked methods. GetMembersByAttribute<TMember>(ITypeSymbol, string) Gets all members of the given member type that are decorated by an attribute with the given attribute name. public static IEnumerable<TMember> GetMembersByAttribute<TMember>(this ITypeSymbol symbol, string fullAttributeName) where TMember : ISymbol Parameters symbol ITypeSymbol The type to get members from. fullAttributeName string The name of the attribute (with \"Attribute\" suffix) to check for. Returns IEnumerable<TMember> Enumerable containing all members of type TMember that are decorated with the given attribute. Type Parameters TMember The type of the members to retrieve. GetUnassignedPrivateAndProtectedReadonlyFields(ITypeSymbol) Retrieves all private and protected readonly fields from the type that aren't assigned a value when declared. public static IEnumerable<IFieldSymbol> GetUnassignedPrivateAndProtectedReadonlyFields(this ITypeSymbol symbol) Parameters symbol ITypeSymbol The symbol to retrieve the fields from. Returns IEnumerable<IFieldSymbol> An enumerable of private and protected readonly fields from the symbol. GetUnassignedPrivateReadonlyFields(ITypeSymbol) Retrieves all private readonly fields from the type that aren't assigned a value when declared. public static IEnumerable<IFieldSymbol> GetUnassignedPrivateReadonlyFields(this ITypeSymbol symbol) Parameters symbol ITypeSymbol The symbol to retrieve the fields from. Returns IEnumerable<IFieldSymbol> An enumerable of private readonly fields from the symbol. HasAnyAttribute(MemberDeclarationSyntax, params string[]) Checks if the given member has at least one of the given attributes. public static bool HasAnyAttribute(this MemberDeclarationSyntax syntax, params string[] attributeNames) Parameters syntax MemberDeclarationSyntax The member to check for attributes. attributeNames string[] The short names (without \"Attribute\" suffix) of the attributes to check for. Returns bool True if one or more of the attributes are present on the member. HasAttribute(MemberDeclarationSyntax, string) Checks if a MemberDeclarationSyntax is decorated with an attribute of the given name. Does not work with attributes that have type parameters—use HasGenericAttribute(MemberDeclarationSyntax, string) instead. public static bool HasAttribute(this MemberDeclarationSyntax syntax, string attributeName) Parameters syntax MemberDeclarationSyntax The member declaration syntax to check for the attribute. attributeName string The short name (without \"Attribute\" suffix) of the attribute to check for. Returns bool True if the attribute is present on the member. HasAttribute(ISymbol, string) Checks if the given symbol is decorated by an attribute with the given name. public static bool HasAttribute(this ISymbol symbol, string fullAttributeName) Parameters symbol ISymbol The symbol to check. fullAttributeName string The name of the attribute (with \"Attribute\" suffix) to check for. Returns bool True if the symbol is decorated with the attribute. HasBaseClass(ClassDeclarationSyntax, string) Checks if the given class inherits a class with the given base class name. public static bool HasBaseClass(this ClassDeclarationSyntax syntax, string baseClassName) Parameters syntax ClassDeclarationSyntax The class to check for the base class. baseClassName string The local name of the base class to check for. Returns bool True if the class inherits the base class. HasGenericAttribute(MemberDeclarationSyntax, string) Checks if a MemberDeclarationSyntax is decorated with a generic attribute of the given name. public static bool HasGenericAttribute(this MemberDeclarationSyntax syntax, string attributeName) Parameters syntax MemberDeclarationSyntax The member declaration syntax to check for the attribute. attributeName string The short name (without \"Attribute\" suffix) of the attribute to check for. Returns bool True if the generic attribute is present on the member. HasGenericInterface(ClassDeclarationSyntax, string) Checks if a ClassDeclarationSyntax implements a generic interface with the given name. public static bool HasGenericInterface(this ClassDeclarationSyntax classDeclaration, string interfaceName) Parameters classDeclaration ClassDeclarationSyntax The class declaration syntax to check for the matching interface. interfaceName string The local name of the interface to check for. Returns bool True if the generic interface is implemented in the class. HasInterface(ClassDeclarationSyntax, string) Checks if a ClassDeclarationSyntax implements an interface with the given name. Does not work with interfaces that have type parameters—use HasGenericInterface(ClassDeclarationSyntax, string) instead. public static bool HasInterface(this ClassDeclarationSyntax classDeclaration, string interfaceName) Parameters classDeclaration ClassDeclarationSyntax The class declaration syntax to check for the matching interface. interfaceName string The local name of the interface to check for. Returns bool True if the interface is implemented in the class. Pluralize(string) Converts a singular string to a plural string. public static string Pluralize(this string value) Parameters value string The singular text to convert. Returns string The pluralized text. Split<TFlags>(TFlags) Splits a bitfield into its individual flags. public static IEnumerable<TFlags> Split<TFlags>(this TFlags value) where TFlags : struct, Enum Parameters value TFlags The bitfield to split. Returns IEnumerable<TFlags> An enumerable containing the individual flags. Type Parameters TFlags The type of the flags enum representing the bitfield. ToPropertyName(string) Converts a field name that follows standard C# conventions to a matching property name. For example, \"_someValue\" will convert to \"SomeValue.\" public static string ToPropertyName(this string fieldName) Parameters fieldName string The name of the backing field. Returns string The property name."
  },
  "api/Anima.Utilities.SourceGeneration.IncrementalClassGenerator-1.html": {
    "href": "api/Anima.Utilities.SourceGeneration.IncrementalClassGenerator-1.html",
    "title": "Class IncrementalClassGenerator<TDefinition> | Anima",
    "keywords": "Class IncrementalClassGenerator<TDefinition> Namespace Anima.Utilities.SourceGeneration Assembly Anima.Utilities.SourceGeneration.dll Base class that simplifies creating source generators for partial classes. public abstract class IncrementalClassGenerator<TDefinition> : IIncrementalGenerator where TDefinition : ClassDefinition Type Parameters TDefinition The class definition type that the Transform(GeneratorSyntaxContext, CancellationToken) method will output. Inheritance object IncrementalClassGenerator<TDefinition> Implements IIncrementalGenerator Derived IncrementalClassGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties StaticSource Source code in this dictionary will be added to the compilation automatically. protected virtual IEnumerable<StaticSourceDefinition> StaticSource { get; } Property Value IEnumerable<StaticSourceDefinition> Methods BuildSource(SourceProductionContext, Compilation, ImmutableArray<TDefinition>) Implement this method to build source code and add it to the context. protected abstract void BuildSource(SourceProductionContext context, Compilation compilation, ImmutableArray<TDefinition> definitions) Parameters context SourceProductionContext The source production context. compilation Compilation The active compilation. definitions ImmutableArray<TDefinition> The class definitions output by the Transform(GeneratorSyntaxContext, CancellationToken) method. Initialize(IncrementalGeneratorInitializationContext) public void Initialize(IncrementalGeneratorInitializationContext context) Parameters context IncrementalGeneratorInitializationContext Predicate(ClassDeclarationSyntax) The predicate function used to determine if classes match this generator. protected abstract bool Predicate(ClassDeclarationSyntax declaration) Parameters declaration ClassDeclarationSyntax The class declaration to check. Returns bool True if the class should be matched by this generator. Transform(GeneratorSyntaxContext, CancellationToken) Transforms the filtered class symbol into a ClassDefinition. Override this if you need custom transformation logic. protected virtual TDefinition Transform(GeneratorSyntaxContext context, CancellationToken cancellationToken) Parameters context GeneratorSyntaxContext The generator syntax context. cancellationToken CancellationToken The cancellation token. Returns TDefinition The transformed ClassDefinition."
  },
  "api/Anima.Utilities.SourceGeneration.IncrementalClassGenerator.html": {
    "href": "api/Anima.Utilities.SourceGeneration.IncrementalClassGenerator.html",
    "title": "Class IncrementalClassGenerator | Anima",
    "keywords": "Class IncrementalClassGenerator Namespace Anima.Utilities.SourceGeneration Assembly Anima.Utilities.SourceGeneration.dll Non-generic implementation of IncrementalClassGenerator<TDefinition> public abstract class IncrementalClassGenerator : IncrementalClassGenerator<ClassDefinition>, IIncrementalGenerator Inheritance object IncrementalClassGenerator<ClassDefinition> IncrementalClassGenerator Implements IIncrementalGenerator Derived DbSetGenerator Inherited Members IncrementalClassGenerator<ClassDefinition>.StaticSource IncrementalClassGenerator<ClassDefinition>.Initialize(IncrementalGeneratorInitializationContext) IncrementalClassGenerator<ClassDefinition>.Transform(GeneratorSyntaxContext, CancellationToken) IncrementalClassGenerator<ClassDefinition>.Predicate(ClassDeclarationSyntax) IncrementalClassGenerator<ClassDefinition>.BuildSource(SourceProductionContext, Compilation, ImmutableArray<ClassDefinition>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Anima.Utilities.SourceGeneration.SourceBuilder.html": {
    "href": "api/Anima.Utilities.SourceGeneration.SourceBuilder.html",
    "title": "Class SourceBuilder | Anima",
    "keywords": "Class SourceBuilder Namespace Anima.Utilities.SourceGeneration Assembly Anima.Utilities.SourceGeneration.dll A light wrapper around StringBuilder that makes building source code strings easier. public sealed class SourceBuilder Inheritance object SourceBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Constructors SourceBuilder() Instantiates a builder for a new source code string. public SourceBuilder() Methods Append(char) Appends a character to the source. public SourceBuilder Append(char value) Parameters value char Returns SourceBuilder Append(string) Appends a string to the source. public SourceBuilder Append(string value) Parameters value string Returns SourceBuilder AppendLine() Appends a line break to the source. public SourceBuilder AppendLine() Returns SourceBuilder AppendLine(char) Appends a character to the source, followed by a line break. public SourceBuilder AppendLine(char value) Parameters value char Returns SourceBuilder AppendLine(string) Appends a string to the source, followed by a line break. public SourceBuilder AppendLine(string value) Parameters value string Returns SourceBuilder AppendLines<TObject>(IEnumerable<TObject>, Func<TObject, string>) Appends a line of code to the source for each object in a collection. public SourceBuilder AppendLines<TObject>(IEnumerable<TObject> objects, Func<TObject, string> getValue) Parameters objects IEnumerable<TObject> The objects to generate code for. getValue Func<TObject, string> Function that gets the source string for each object. Returns SourceBuilder Type Parameters TObject The type of the objects in the collection. AppendLines<TObject>(TObject[], Func<TObject, string>, char) Appends a line of code to the source for each object in an array. This overload will also add the separator character at the end of each line except the last. public SourceBuilder AppendLines<TObject>(TObject[] objects, Func<TObject, string> getValue, char separator) Parameters objects TObject[] The objects to generate code for. getValue Func<TObject, string> Function that gets the source string for each object. separator char The character to append to the end of each line. Returns SourceBuilder Type Parameters TObject The type of the objects in the collection. Indent() Indents the caret by another 4 spaces. public SourceBuilder Indent() Returns SourceBuilder Outdent() Outdents the caret by another 4 spaces. public SourceBuilder Outdent() Returns SourceBuilder ToString() Builds the final source code string. public override string ToString() Returns string The built source code string."
  },
  "api/Anima.Utilities.SourceGeneration.StaticSourceDefinition.html": {
    "href": "api/Anima.Utilities.SourceGeneration.StaticSourceDefinition.html",
    "title": "Class StaticSourceDefinition | Anima",
    "keywords": "Class StaticSourceDefinition Namespace Anima.Utilities.SourceGeneration Assembly Anima.Utilities.SourceGeneration.dll Base class for static source that needs to be added to the compilation, such as marker attribute classes. public abstract class StaticSourceDefinition Inheritance object StaticSourceDefinition Derived EntityInterface GenerateDbSetsAttribute Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FileName The name of the source file that will be generated from this source. public string FileName { get; } Property Value string Source Builds the source. public abstract string Source { get; } Property Value string"
  },
  "api/Anima.Utilities.SourceGeneration.html": {
    "href": "api/Anima.Utilities.SourceGeneration.html",
    "title": "Namespace Anima.Utilities.SourceGeneration | Anima",
    "keywords": "Namespace Anima.Utilities.SourceGeneration Classes AttributeHelper Helper methods for building marker attribute source. ClassDefinition Wrapper class for INamedTypeSymbol that holds computed information about a class for easy access in source generation code. Extensions Extension methods to assist with source generation. IncrementalClassGenerator Non-generic implementation of IncrementalClassGenerator<TDefinition> IncrementalClassGenerator<TDefinition> Base class that simplifies creating source generators for partial classes. SourceBuilder A light wrapper around StringBuilder that makes building source code strings easier. StaticSourceDefinition Base class for static source that needs to be added to the compilation, such as marker attribute classes."
  },
  "index.html": {
    "href": "index.html",
    "title": "Anima | Anima",
    "keywords": "Anima General purpose .NET libraries for everyday use. Warning Anima is currently in alpha, so releases are liable to regularly include breaking changes. Packages Name Description Visium.Anima Helper classes, types, methods, and extensions for common .NET operations. Visium.Anima.Utilities.SourceGeneration Utility classes and helper methods to aid in the creation of source generators. Visium.Anima.EntityFrameworkCore.SourceGeneration Source generators to reduce boilerplate when working with EntityFrameworkCore. Visium.Anima.Extensions.Console Build simple console applications with Microsoft.Extensions.DependencyInjection. Installation To install a package, simply search for the package name from the table above in the NuGet package manager of your favourite IDE. Alternatively, they can be installed from the commandline if you have the .NET SDK installed by using the following command: dotnet add package <PackageName> For example, to install Anima.EntityFrameworkCore.SourceGeneration, run the following command: dotnet add package Visium.Anima.EntityFrameworkCore.SourceGeneration Usage Refer to the API documentation by clicking the API tab in the header bar of this site."
  }
}