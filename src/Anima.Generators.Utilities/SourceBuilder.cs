using System.Text;

namespace Anima.Generators.Utilities;

/// <summary>
/// A light wrapper around <see cref="System.Text.StringBuilder" /> that makes building source code strings easier
/// </summary>
public sealed class SourceBuilder
{
    private readonly StringBuilder _builder = new();

    private int _indentation;
    private bool _shouldIndent;

    public SourceBuilder()
    {
        // Automatically add boilerplate
        AppendLine("/// <auto-generated/>");
        AppendLine();
        AppendLine("#nullable enable");
        AppendLine();
    }

    public SourceBuilder Indent()
    {
        _indentation++;
        return this;
    }

    public SourceBuilder Outdent()
    {
        _indentation = Math.Max(0, _indentation - 1);
        return this;
    }

    public SourceBuilder Append(char value)
    {
        if (_shouldIndent)
        {
            _builder.Append(new string(' ', _indentation * 4));
        }

        _builder.Append(value);
        _shouldIndent = false;
        return this;
    }

    public SourceBuilder Append(string value)
    {
        if (_shouldIndent)
        {
            _builder.Append(new string(' ', _indentation * 4));
        }

        _builder.Append(value);
        _shouldIndent = false;
        return this;
    }

    public SourceBuilder AppendLine()
    {
        _builder.AppendLine();

        _shouldIndent = true;
        return this;
    }

    public SourceBuilder AppendLine(char value)
    {
        if (_shouldIndent)
        {
            _builder.Append(new string(' ', _indentation * 4));
        }

        _builder.Append(value).AppendLine();
        _shouldIndent = true;
        return this;
    }

    public SourceBuilder AppendLine(string value)
    {
        if (_shouldIndent)
        {
            _builder.Append(new string(' ', _indentation * 4));
        }

        _builder.AppendLine(value);
        _shouldIndent = true;
        return this;
    }

    public SourceBuilder AppendLines<TObject>(IEnumerable<TObject> objects, Func<TObject, string> getValue)
    {
        foreach (var obj in objects)
        {
            AppendLine(getValue(obj));
        }

        return this;
    }

    public SourceBuilder AppendLines<TObject>(TObject[] objects, Func<TObject, string> getValue, char separator)
    {
        for (var i = 0; i < objects.Length; i++)
        {
            var obj = objects[i];
            Append(getValue(obj));

            if (i < objects.Length - 1)
            {
                Append(separator);
            }

            AppendLine();
        }

        return this;
    }

    public override string ToString() => _builder.ToString();
}